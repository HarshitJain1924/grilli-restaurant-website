pipeline {
    agent {
        docker {
            image 'docker:20.10.24-dind' // Use an image that has the Docker CLI
            // Explicitly map the socket for the agent
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        // !! Replace 'your-dockerhub-username' with your actual Docker Hub username !!
        DOCKERHUB_USERNAME = 'harshitjain1924' // <-- Make sure this is correct!
        IMAGE_NAME = "${env.DOCKERHUB_USERNAME}/grilli-website"
        IMAGE_TAG = "build-${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            // This stage now runs inside the docker agent container
            // Jenkins automatically checks out before starting the agent,
            // but an explicit step ensures we are in the right state.
            steps {
                // We check out the whole repository into the workspace root
                checkout scm
                script {
                    def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    echo "Checked out commit: ${commitHash}"
                    echo "Listing files in workspace root:"
                    // The '.' directory will be the workspace root
                    sh 'ls -la .'
                    echo "Listing files in Grilli/ subdirectory:"
                    // Check if the Grilli subdirectory and its contents exist
                    sh 'ls -la Grilli/'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image: ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                // IMPORTANT CHANGE:
                // Use '-f' to specify the path to the Dockerfile
                // The '.' at the end specifies the build context (the workspace root)
                sh "docker build -f Grilli/Dockerfile -t ${env.IMAGE_NAME}:${env.IMAGE_TAG} ."

                // Tagging as latest remains the same
                sh "docker tag ${env.IMAGE_NAME}:${env.IMAGE_TAG} ${env.IMAGE_NAME}:latest"
            }
        }

        stage('Push to Docker Hub') {
            steps {
                echo "Pushing image ${env.IMAGE_NAME} to Docker Hub..."
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                    sh "docker push ${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                    sh "docker push ${env.IMAGE_NAME}:latest"
                }
            }
        }
    }

    post {
         always {
            echo "Logging out from Docker Hub..."
            sh "docker logout"
         }
        success {
            echo 'Pipeline successful!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}